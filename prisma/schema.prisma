// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ############################ All Enums 
enum FollowType {
  UP
  DOWN
}

enum UserRole {
  ADMIN
  USER
  STUDENT
  TEACHER
}

// ############################ End Of Enums

model User {
  id                        String       @id @default(cuid()) @map("_id")
  profileImage              String?
  firstName                 String?
  middleName                String?
  lastName                  String?
  username                  String
  gender                    String?
  dateOfBirth               String?
  telePhone                 String?

  // Address
  address                   String?
  cityName                  String?
  country                   String?
  pinCode                   String?

  // Account Information
  email                   String?      @unique
  emailVerified           DateTime?
  password                String?
  role                    UserRole     @default(STUDENT)

  // Identification 
  typeOfIdentificationCard          String?
  identificationCardNumber          String?
  identificationFile                String?

  accounts                          Account[]
  challenges                        Challenge[]
  project                           Project[]

  isTwoFactorEnabled Boolean        @default(false)
  twoFactorConfirmation             TwoFactorConfirmation?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Account {
  id                 String        @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                String    @id @default(cuid()) @map("_id")
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                String    @id @default(cuid()) @map("_id")
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                String        @id @default(cuid()) @map("_id")
  email             String
  token             String        @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                String        @id @default(cuid()) @map("_id")
  email             String  

  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
  
model SearchQuery {
      id                           String    @id @default(cuid()) @map("_id")
      query String
}

model Challenge {
    id                            String    @id @default(cuid()) @map("_id")
    title              String? 
    description        Json?
    image              String?

    challengeType      String?

    startDate          String?
    endDate            String?

    reward             String?
    Visibility         Boolean?

    author             User? @relation(fields: [authorId], references: [id])
    authorId           String

    acceptChallenge    Project[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  }

  model Project {
    id                            String    @id @default(cuid()) @map("_id")
    title              String? 
    description        Json?
    image              String?

    github             String?
    projectLink        String?

    videoDemoLink      String?
    Inspiration        String?
    challengesFaced    String?

    challenge                 Challenge? @relation(fields: [challengeId], references: [id])
    challengeId               String
    author                    User? @relation(fields: [authorId], references: [id])
    authorId                  String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  }

  
