// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ############################ All Enums 
enum FollowType {
  UP
  DOWN
}

enum UserRole {
  WRITER
  READER
  ADMIN
  USER
  STUDENT
  TEACHER
}

// ############################ End Of Enums

model User {
  id                        String       @id @default(cuid()) @map("_id")
  profileImage              String?
  firstName                 String?
  middleName                String?
  lastName                  String?
  username                  String
  gender                    String?
  dateOfBirth               String?
  telePhone                 String?

  // Address
  address                   String?
  cityName                  String?
  country                   String?
  pinCode                   String?

  // Account Information
  email                   String?      @unique
  emailVerified           DateTime?
  password                String?
  role                    UserRole     @default(STUDENT)
  deviceId                String?

  // Identification 
  typeOfIdentificationCard          String?
  identificationCardNumber          String?
  identificationFile                String?

  accounts                          Account[]
  subject                           Subject[]

  examsTaken                        UserExam[]
  badges                            UserBadge[]
  subscriptions                     Subscription[]

  isTwoFactorEnabled Boolean        @default(false)
  twoFactorConfirmation             TwoFactorConfirmation?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ChatMessage ChatMessage[]

  Chat Chat[]
}


model Account {
  id                 String        @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                String    @id @default(cuid()) @map("_id")
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                String    @id @default(cuid()) @map("_id")
  email             String
  token             String    @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                String        @id @default(cuid()) @map("_id")
  email             String
  token             String        @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                String        @id @default(cuid()) @map("_id")
  email             String  

  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
  
model SearchQuery {
      id                           String    @id @default(cuid()) @map("_id")
      query String
}

//############################################################################## 

model Exam {
  id             String       @id @default(cuid()) @map("_id")
  topic          String
  numQuestions   Int
  createdAt      DateTime   @default(now())
  questions      Question[]
  userExams      UserExam[]
}

model Question {
  id             String       @id @default(cuid()) @map("_id")
  type           String   
  prompt         String
  choices        Json?    
  reference      String
  exam             Exam? @relation(fields: [examId], references: [id])
  examId           String
  userAnswers    UserAnswer[]
}

model UserExam {
  id             String      @id @default(cuid()) @map("_id")
  
  startedAt      DateTime  @default(now())
  submittedAt    DateTime?
  score          Int?
  pointsAwarded  Int?
  user           User?       @relation(fields: [userId], references: [id])
  userId         String
  exam           Exam?      @relation(fields: [examId], references: [id])
  examId         String
  answers        UserAnswer[]
}

model UserAnswer {
  id             String       @id @default(cuid()) @map("_id")
  answerText     String
  isCorrect      Boolean?
  userExam       UserExam @relation(fields: [userExamId], references: [id])
  userExamId     String
  question       Question @relation(fields: [questionId], references: [id])
  questionId     String
}

model Badge {
  id             String      @id @default(cuid()) @map("_id")
  name          String
  criteria      Json      
  icon          String
  userBadges    UserBadge[]
}

model UserBadge {
  id             String      @id @default(cuid()) @map("_id")
  awardedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    String
}

model Subject {
  id                 String      @id @default(cuid()) @map("_id")
  image              String?
  title              String
  content            Json?
  author             User?    @relation(fields: [authorId], references: [id])
  authorId           String
  createdAt          DateTime @default(now())
  searchText         String?  // <-- add this for searchability
  subscriptions      Subscription[]
  ChatMessage        ChatMessage[]
}

model ChatMessage {
  id             String      @id @default(cuid()) @map("_id")
  role           String   // 'user' or 'ai'
  content        String
  createdAt      DateTime @default(now())

  author         User?    @relation(fields: [userId], references: [id])
  userId         String
  
  subject        Subject?    @relation(fields: [subjectId], references: [id])
  subjectId      String
}

model Chat {
  id             String      @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subjectId    String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, subjectId]) 
}

model Subscription {
  id        String      @id @default(cuid()) @map("_id")
  userId    String
  subjectId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  subject      Subject     @relation(fields: [subjectId], references: [id])

  @@unique([userId, subjectId])
}